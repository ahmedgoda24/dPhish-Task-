"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""




# Read .env file


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/



import os
import psycopg2.extensions
from pathlib import Path
import environ
from django.utils.translation import gettext_lazy as _
from django.conf import settings
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(BASE_DIR.parent / '.env', overwrite=True)
environ.Env.read_env(BASE_DIR.parent / '.env.backend.dev', overwrite=True)
env = environ.Env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)




# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_celery_results',
    'channels',
    'ipinfo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
ASGI_APPLICATION = 'project.asgi.application'
WSGI_APPLICATION = 'project.wsgi.application'

APPEND_SLASH = env.bool('APPEND_SLASH', default=False)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
SQLITE_DB_BACKEND = 'django.db.backends.sqlite3'
DATABASES = {
    'default': {
        'ENGINE': env.str('POSTGRES_ENGINE', default=SQLITE_DB_BACKEND),
        'HOST': env.str('POSTGRES_HOST', default='localhost'),
        'PORT': env.str('POSTGRES_PORT', default='5432'),
        'USER': env.str('POSTGRES_USER', default='user'),
        'PASSWORD': env.str('POSTGRES_PASSWORD', default='password'),
        'NAME': env.str('POSTGRES_DB', default='db.sqlite3'),
        'CHARSET': env.str('POSTGRES_CHARSET', default='utf8'),
        'TIME_ZONE': env.str('POSTGRES_TIME_ZONE', default='UTC'),
        'CONN_HEALTH_CHECKS': env.bool('CONN_HEALTH_CHECKS', default=True),
        # 'CONN_MAX_AGE': env.int('CONN_MAX_AGE', default=0), # Comment this line if you want to use dj_db_conn_pool engine
        'POOL_OPTIONS': {
            'POOL_SIZE': env.int('POSTGRES_POOL_SIZE', default=10),
            'MAX_OVERFLOW': env.int('POSTGRES_POOL_MAX_OVERFLOW', default=20),
            'RECYCLE': env.int('POSTGRES_POOL_RECYCLE', default=3600),
            'TIMEOUT': env.int('POSTGRES_POOL_TIMEOUT', default=30),
        },
        'OPTIONS': {
            'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_READ_COMMITTED if env.str(
                'POSTGRES_ENGINE', default=SQLITE_DB_BACKEND) != SQLITE_DB_BACKEND else None,
            'sslmode': env.str('POSTGRES_SSLMODE', default='disable'),
        }
    }
}
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True

LANGUAGE_CODE = 'en-us'



LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale/'),
]

TIME_ZONE = env.str('TIME_ZONE', default='UTC')

USE_I18N = True

USE_TZ = env.bool('USE_TZ', default=True)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = 'static/'

STATIC_URL = env.str('STATIC_URL', default='/static/')

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')

# Add STATICFILES_DIRS for development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = env.str('MEDIA_URL', default='/media/')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REDIS_HOST = env.str('REDIS_HOST', default='localhost')
REDIS_PORT = env.int('REDIS_PORT', default=6379)
REDIS_DB = env.int('REDIS_DB', default=0)
REDIS_PASSWORD = env.str('REDIS_PASSWORD', default=None)


# celery + docker 
# CELERY_RESULT_BACKEND = "redis://redis:6379"
# CELERY_BROKER_URL="redis://redis:6379"

# Celery Configuration

CELERY_ENABLE_UTC = env.bool('CELERY_ENABLE_UTC', default=False)
CELERY_TIMEZONE = env.str('CELERY_TIMEZONE', default='Asia/Dubai')
CELERY_BROKER_URL = env.str('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = env.str('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
BROKER_CONNECTION_RETRY = env.bool('BROKER_CONNECTION_RETRY', default=True)
BROKER_CONNECTION_MAX_RETRIES = env.int('BROKER_CONNECTION_MAX_RETRIES', default=5)
BROKER_CONNECTION_TIMEOUT = env.int('BROKER_CONNECTION_TIMEOUT', default=30)
CELERY_ACCEPT_CONTENT = {'application/json', 'application/x-python-serialize'}
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'


# Channels Configurations

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [(REDIS_HOST, REDIS_PORT)],
            'capacity': env.int('REDIS_CHANNEL_CAPACITY', default=100),
            'expiry': env.int('REDIS_CHANNEL_EXPIRY', default=60),
        },
    }
}



